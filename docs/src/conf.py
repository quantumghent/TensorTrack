import sys
import os
import inspect
import shutil
import glob
import re


# Configuration file for the Sphinx documentation builder.

docs_src = os.path.abspath(os.path.dirname(__file__))  # docs source folder
docs_root = os.path.abspath(os.path.join(docs_src, '..'))  # docs root folder
repo_root = os.path.abspath(os.path.join(docs_src, '..', '..'))  # repo root folder
GITHUBBASE = 'https://github.com/lkdvos/TensorTrack'  # repo link

# -- Project information

project = 'TensorTrack'
copyright = '2022, The TensorTrack developers'
author = 'The TensorTrack developers'

# Extract full version (including alpha/beta/rc tags) from github tag
tag = re.sub('^v', '', os.popen('git describe --tags').read().strip())
release = '-'.join(tag.split('-')[:2])
# The short X.Y version
version = release.split('-')[0]


# -- General configuration -----------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
# needs_sphinx = '4.5'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.napoleon',
    'sphinx.ext.duration',
    'sphinx.ext.doctest',
    'sphinx.ext.autodoc',
    'sphinx.ext.autosummary',
    'sphinx.ext.autosectionlabel',
    'sphinx.ext.todo',
    'sphinx.ext.intersphinx',
    'sphinx.ext.linkcode',
    'sphinx.ext.extlinks',
    'sphinx.ext.mathjax',
    'sphinx-prompt',
    'sphinxcontrib.matlab',
    'nbsphinx',
    'myst_parser',
    'sphinx_gallery.load_style'
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
source_suffix = ['.rst', '.md']

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'default'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ['_build', '**.ipynb_checkpoints']


# -- Options for HTML output -----------------------------------------------

html_theme = 'sphinx_rtd_theme'

html_logo = 'img/logo.png'

html_title = u'The TensorTrack documentation'

html_static_path = ['_static']

html_css_files = [
    'css/custom.css',
]

html_theme_options = {
    'logo_only': True,
    'collapse_navigation': False,
}


# -- Options for EPUB output -----------------------------------------------
epub_show_urls = 'footnote'


# == Options for extensions ===============================================


# -- sphinx.ext.autodoc -----------------------------------------------
# configuration for autodoc
add_module_names = False
autodoc_default_options = {
    'members': True,
    'show-inheritance': True,
    'member-order': 'bysource'
}

# -- sphinx.ext.autosummary -----------------------------------------------
# configuration for autosummary
autosummary_generate = False


# -- sphinx.ext.todo -----------------------------------------------
# configuration for todo notes extension
todo_include_todos = True


# -- sphinx.ext.intersphinx -----------------------------------------------
# cross links to other sphinx documentations
# this makes  e.g. :class:`numpy.ndarray` work
intersphinx_mapping = {
    'python': ('https://docs.python.org/3', None),
    'sphinx': ('https://www.sphinx-doc.org/en/master/', None),
    'numpy': ('https://numpy.org/doc/stable', None),
    'scipy': ('https://docs.scipy.org/doc/scipy/reference/', None),
    'matplotlib': ('https://matplotlib.org', None),
    'h5py': ('https://docs.h5py.org/en/stable/', None),
}
intersphinx_disabled_domains = ['std']


# -- sphinx.ext.extlinks --------------------------------------------------
# allows to use, e.g., :arxiv:`1805.00055`
extlinks = {
    'arxiv': ('https://arxiv.org/abs/%s', 'arXiv:'),
    'doi': ('https://dx.doi.org/%s', 'doi:'),
    'issue': (GITHUBBASE + '/issues/%s', 'issue #'),
}


# -- sphinx.ext.linkcode --------------------------------------------------
# linkcode to put links to the github repository from the documentation

def  linkcode_resolve(domain, info):
    pass

# def linkcode_resolve(domain, info):
#     # based on the corresponding linkcode_resolve in the `conf.py` of the TenPy
#     # repository.
#     # TODO: fix this, not working at all
    
#     if domain != 'mat':
#     	# only link to .mat files
#         return None
        
#     modname = info['module']
#     fullname = info['fullname']
    
#     if not modname or (modname.split('.')[0] not in ['src']):
#         # these aren't the modules we're looking for
#         return None
        
#     # grab the name of the source file
#     filename = modname.replace('.', '/') + '/' + fullname + '.m'
    
# 	# grab the module referenced in the docs
#     submod = sys.modules.get(modname)
#     if submod is None:
#         return None

#     obj = submod
#     for part in fullname.split('.'):
#         try:
#             obj = getattr(obj, part)
#         except Exception:
#             return None
            
# 	# find out line number
#     try:
#         lineno = inspect.findsource(obj)[1]
#     except:
#         lineno = None

#     # Build a reference for the line number in GitHub.
#     if lineno:
#         linespec = '#L%d' % (lineno + 1)
#     else:
#         lineno = ''

#     return ('%s/blob/%s/%s%s'
#             % (GITHUBBASE, 'main',
#                filename, linespec))




# -- sphinx.ext.napoleon -----------------------------------------------
# Napoleon settings
napoleon_google_docstring = True
napoleon_numpy_docstring = True
napoleon_include_init_with_doc = False
napoleon_include_private_with_doc = False
napoleon_include_special_with_doc = True
napoleon_use_admonition_for_examples = False
napoleon_use_admonition_for_notes = True
napoleon_use_admonition_for_references = False
napoleon_use_ivar = False
napoleon_use_param = True
napoleon_use_rtype = True
napoleon_preprocess_types = False
napoleon_type_aliases = None
napoleon_attr_annotations = True
napoleon_custom_sections = [
    ('Properties', 'params_style'),
    ('Returns', 'params_style'),
    ('Inputs', 'params_style'),
    ('Arguments', 'params_style'),
    ('Optional Arguments', 'params_style'),
    ('Keyword Arguments', 'params_style'),
    ('Repeating Arguments', 'params_style'),
    ('Optional inputs', 'params_style'),
    'Usage',
    ('Syntax', 'returns_style')
    ]


# -- myst_parser -----------------------------------------------
# extensions for markdown parser
# myst_enable_extensions = [
#     "colon_fence",
#     "deflist",
#     "dollarmath",
#     "fieldlist",
#     "html_admonition",
#     "html_image",
#     "linkify",
#     "replacements",
#     "smartquotes",
#     "strikethrough",
#     "substitution",
#     "tasklist",
# ]


# -- sphinx.ext.mathjax configuration -----------------------------------------------
mathjax3_config = {
  "tex": {
    "inlineMath": [["\\(", "\\)"]],
    "displayMath": [["\\[", "\\]"]],
    "macros": {
      "vect": ["{\\boldsymbol{#1}}", 1],
      "lv": "{\\vect{v}_L^\\dagger}",
      "rv": "{\\vect{v}_R}"
    }
  }
}


# -- sphinxcontrib.matlab -----------------------------------------------
# tell Sphinx matlab extension where to find matlab code.
matlab_keep_package_prefix = False
matlab_src_dir = repo_root
primary_domain = 'mat'
autoclass_content = 'class'
